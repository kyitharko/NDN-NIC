diff --git a/daemon/fw/forwarder.cpp b/daemon/fw/forwarder.cpp
index 20428c5..c8dfcf3 100644
--- a/daemon/fw/forwarder.cpp
+++ b/daemon/fw/forwarder.cpp
@@ -26,6 +26,7 @@
 #include "forwarder.hpp"
 #include "core/logger.hpp"
 #include "core/random.hpp"
+#include "../ttt.hpp"
 #include "strategy.hpp"
 #include <boost/random/uniform_int_distribution.hpp>
 
@@ -150,6 +151,12 @@ void
 Forwarder::onInterestLoop(Face& inFace, const Interest& interest,
                           shared_ptr<pit::Entry> pitEntry)
 {
+  // XXX-NIC Duplicate Nonce is unlikely to happen in single broadcast media.
+  // Just record all of them as DROP.
+  if (Ttt::isNdnNic(inFace)) {
+    Ttt::recordPacketArrival(interest, TttPacketDecision::DROP);
+  }
+
   // if multi-access face, drop
   if (inFace.isMultiAccess()) {
     NFD_LOG_DEBUG("onInterestLoop face=" << inFace.getId() <<
@@ -230,6 +237,18 @@ Forwarder::onContentStoreMiss(const Face& inFace,
     }
   }
 
+  // XXX-NIC Interest does not match CS
+  if (Ttt::isNdnNic(inFace)) {
+    // If it matches a FIB entry and there's some nexthop other than NDN-NIC, it's accepted.
+    if (std::any_of(fibEntry->getNextHops().begin(), fibEntry->getNextHops().end(),
+                    [] (const fib::NextHop& nexthop) { return !Ttt::isNdnNic(*nexthop.getFace()); })) {
+      Ttt::recordPacketArrival(interest, TttPacketDecision::FIB);
+    }
+    else {
+      Ttt::recordPacketArrival(interest, TttPacketDecision::DROP);
+    }
+  }
+
   // dispatch to strategy
   BOOST_ASSERT(fibEntry != nullptr);
   this->dispatchToStrategy(pitEntry, bind(&Strategy::afterReceiveInterest, _1,
@@ -243,6 +262,10 @@ Forwarder::onContentStoreHit(const Face& inFace,
                              const Data& data)
 {
   NFD_LOG_DEBUG("onContentStoreHit interest=" << interest.getName());
+  // XXX-NIC Interest matches CS
+  if (Ttt::isNdnNic(inFace)) {
+    Ttt::recordPacketArrival(interest, TttPacketDecision::CS);
+  }
 
   const_pointer_cast<Data>(data.shared_from_this())->setIncomingFaceId(FACEID_CONTENT_STORE);
   // XXX should we lookup PIT for other Interests that also match csMatch?
@@ -391,6 +414,23 @@ Forwarder::onIncomingData(Face& inFace, const Data& data)
     return;
   }
 
+  // XXX-NIC Data matches PIT
+  if (Ttt::isNdnNic(inFace)) {
+    // Further check whether PIT entry has an out-record on NDN-NIC.
+    if (std::any_of(pitMatches.begin(), pitMatches.end(),
+        [&inFace] (const shared_ptr<pit::Entry>& pitEntry) {
+          return pitEntry->getOutRecord(inFace) != pitEntry->getOutRecords().end();
+        })) {
+      Ttt::recordPacketArrival(data, TttPacketDecision::PIT);
+    }
+    else {
+      // We must drop this Data to keep CS trace accurate.
+      NFD_LOG_DEBUG("onIncomingData no-out-record");
+      Ttt::recordPacketArrival(data, TttPacketDecision::DROP);
+      return;
+    }
+  }
+
   // CS insert
   m_cs.insert(data);
 
@@ -438,6 +478,11 @@ Forwarder::onIncomingData(Face& inFace, const Data& data)
 void
 Forwarder::onDataUnsolicited(Face& inFace, const Data& data)
 {
+  // XXX-NIC Data does not match PIT
+  if (Ttt::isNdnNic(inFace)) {
+    Ttt::recordPacketArrival(data, TttPacketDecision::DROP);
+  }
+
   // accept to cache?
   bool acceptToCache = inFace.isLocal();
   if (acceptToCache) {
diff --git a/daemon/table/cs.cpp b/daemon/table/cs.cpp
index 674d333..eab1c0a 100644
--- a/daemon/table/cs.cpp
+++ b/daemon/table/cs.cpp
@@ -25,6 +25,7 @@
 
 #include "cs.hpp"
 #include "cs-policy-priority-fifo.hpp"
+#include "../ttt.hpp"
 #include "core/logger.hpp"
 #include "core/algorithm.hpp"
 
@@ -111,6 +112,7 @@ Cs::insert(const Data& data, bool isUnsolicited)
   }
   else {
     m_policy->afterInsert(it);
+    Ttt::recordTableChange(TttTableAction::INS, TttTable::CS, data.getName());
   }
 
   return true;
@@ -201,6 +203,7 @@ Cs::setPolicyImpl(unique_ptr<Policy>& policy)
 {
   m_policy = std::move(policy);
   m_beforeEvictConnection = m_policy->beforeEvict.connect([this] (iterator it) {
+      Ttt::recordTableChange(TttTableAction::DEL, TttTable::CS, it->getName());
       m_table.erase(it);
     });
 
diff --git a/daemon/table/fib-entry.cpp b/daemon/table/fib-entry.cpp
index b2ea76c..905016c 100644
--- a/daemon/table/fib-entry.cpp
+++ b/daemon/table/fib-entry.cpp
@@ -24,6 +24,7 @@
  */
 
 #include "fib-entry.hpp"
+#include "../ttt.hpp"
 
 namespace nfd {
 namespace fib {
@@ -51,6 +52,14 @@ Entry::hasNextHop(shared_ptr<Face> face) const
 void
 Entry::addNextHop(shared_ptr<Face> face, uint64_t cost)
 {
+  // XXX-NIC FIB entry is relevant to NDN-NIC only if it has a nexthop other than NDN-NIC itself.
+  // Insertion is recorded when the first non-NDN-NIC nexthop is added.
+  if (!Ttt::isNdnNic(*face) &&
+      std::none_of(m_nextHops.begin(), m_nextHops.end(),
+                   [] (const NextHop& nexthop) { return !Ttt::isNdnNic(*nexthop.getFace()); })) {
+    Ttt::recordTableChange(TttTableAction::INS, TttTable::FIB, m_prefix);
+  }
+
   auto it = this->findNextHop(*face);
   if (it == m_nextHops.end()) {
     m_nextHops.push_back(fib::NextHop(face));
@@ -70,6 +79,14 @@ Entry::removeNextHop(shared_ptr<Face> face)
   auto it = this->findNextHop(*face);
   if (it != m_nextHops.end()) {
     m_nextHops.erase(it);
+
+    // XXX-NIC FIB entry is relevant to NDN-NIC only if it has a nexthop other than NDN-NIC itself.
+    // Deletion is recorded when the last non-NDN-NIC nexthop is removed.
+    if (!Ttt::isNdnNic(*face) &&
+        std::none_of(m_nextHops.begin(), m_nextHops.end(),
+                     [] (const NextHop& nexthop) { return !Ttt::isNdnNic(*nexthop.getFace()); })) {
+      Ttt::recordTableChange(TttTableAction::DEL, TttTable::FIB, m_prefix);
+    }
   }
 }
 
diff --git a/daemon/table/pit-entry.cpp b/daemon/table/pit-entry.cpp
index 85ea19c..d7a98fb 100644
--- a/daemon/table/pit-entry.cpp
+++ b/daemon/table/pit-entry.cpp
@@ -24,6 +24,7 @@
  */
 
 #include "pit-entry.hpp"
+#include "../ttt.hpp"
 #include <algorithm>
 
 namespace nfd {
@@ -172,6 +173,12 @@ Entry::insertOrUpdateOutRecord(shared_ptr<Face> face, const Interest& interest)
   if (it == m_outRecords.end()) {
     m_outRecords.emplace_front(face);
     it = m_outRecords.begin();
+
+    // XXX-NIC PIT entry is relevant to NDN-NIC only if NDN-NIC is an upstream.
+    // Insertion is recorded when an out-record on NDN-NIC is inserted.
+    if (Ttt::isNdnNic(*face)) {
+      Ttt::recordTableChange(TttTableAction::INS, TttTable::PIT, this->getName());
+    }
   }
 
   it->update(interest);
@@ -192,6 +199,12 @@ Entry::deleteOutRecord(const Face& face)
     [&face] (const OutRecord& outRecord) { return outRecord.getFace().get() == &face; });
   if (it != m_outRecords.end()) {
     m_outRecords.erase(it);
+
+    // XXX-NIC PIT entry is relevant to NDN-NIC only if NDN-NIC is an upstream.
+    // Deletion is recorded when an out-record on NDN-NIC is deleted.
+    if (Ttt::isNdnNic(face)) {
+      Ttt::recordTableChange(TttTableAction::DEL, TttTable::PIT, this->getName());
+    }
   }
 }
 
diff --git a/daemon/table/pit.cpp b/daemon/table/pit.cpp
index 959593f..9dbbc05 100644
--- a/daemon/table/pit.cpp
+++ b/daemon/table/pit.cpp
@@ -24,6 +24,7 @@
  */
 
 #include "pit.hpp"
+#include "../ttt.hpp"
 #include <type_traits>
 
 #include <boost/concept/assert.hpp>
@@ -114,6 +115,14 @@ Pit::erase(shared_ptr<pit::Entry> pitEntry)
   shared_ptr<name_tree::Entry> nameTreeEntry = m_nameTree.get(*pitEntry);
   BOOST_ASSERT(static_cast<bool>(nameTreeEntry));
 
+  // XXX-NIC PIT entry is relevant to NDN-NIC only if NDN-NIC is an upstream.
+  // Deletion is recorded when an entry containing an out-record on NDN-NIC is erased.
+  const pit::OutRecordCollection& outRecords = pitEntry->getOutRecords();
+  if (std::any_of(outRecords.begin(), outRecords.end(),
+                  [] (const pit::OutRecord& outR) { return Ttt::isNdnNic(*outR.getFace()); })) {
+    Ttt::recordTableChange(TttTableAction::DEL, TttTable::PIT, pitEntry->getName());
+  }
+
   nameTreeEntry->erasePitEntry(pitEntry);
   m_nameTree.eraseEntryIfEmpty(nameTreeEntry);
 
diff --git a/daemon/ttt.cpp b/daemon/ttt.cpp
new file mode 100644
index 0000000..a82e8e2
--- /dev/null
+++ b/daemon/ttt.cpp
@@ -0,0 +1,120 @@
+#include "ttt.hpp"
+#include "core/logger.hpp"
+
+namespace nfd {
+
+NFD_LOG_INIT("Ttt");
+
+std::ostream&
+operator<<(std::ostream& os, TttPacketDecision decision)
+{
+  switch (decision) {
+    case TttPacketDecision::DROP: return os << "DROP";
+    case TttPacketDecision::FIB: return os << "FIB";
+    case TttPacketDecision::PIT: return os << "PIT";
+    case TttPacketDecision::CS: return os << "CS";
+    default: return os << "NONE";
+  }
+}
+
+std::ostream&
+operator<<(std::ostream& os, TttTableAction action)
+{
+  switch (action) {
+    case TttTableAction::INS: return os << "INS";
+    case TttTableAction::DEL: return os << "DEL";
+    default: return os << "NONE";
+  }
+}
+
+std::ostream&
+operator<<(std::ostream& os, TttTable table)
+{
+  switch (table) {
+    case TttTable::FIB: return os << "FIB";
+    case TttTable::PIT: return os << "PIT";
+    case TttTable::CS: return os << "CS";
+    default: return os << "NONE";
+  }
+}
+
+Ttt&
+Ttt::get()
+{
+  static Ttt instance;
+  return instance;
+}
+
+Ttt::Ttt()
+{
+  if (const char* envFace = std::getenv("TTT_FACE")) {
+    m_ndnNic = FaceUri(envFace);
+  }
+  else {
+    m_ndnNic = FaceUri("invalid://");
+    NFD_LOG_ERROR("TTT_FACE environ is unset, trace will be inaccurate");
+  }
+
+  if (const char* envEpoch = std::getenv("TTT_EPOCH")) {
+    std::time_t epoch = static_cast<std::time_t>(std::atoll(envEpoch));
+    m_epoch = time::system_clock::from_time_t(epoch);
+  }
+  else {
+    m_epoch = time::system_clock::from_time_t(0);
+    NFD_LOG_ERROR("TTT_EPOCH environ is unset, timestamps will use UNIX epoch");
+  }
+
+  if (const char* envLog = std::getenv("TTT_LOG")) {
+    m_os.open(envLog);
+    NFD_LOG_INFO("writing trace to " << envLog << " using epoch " << time::toString(m_epoch));
+  }
+  else {
+    NFD_LOG_ERROR("TTT_LOG environ is unset, no trace will be written");
+  }
+}
+
+bool
+Ttt::isNdnNic(const Face& face)
+{
+  return face.getRemoteUri() == Ttt::get().m_ndnNic;
+}
+
+std::ostream&
+Ttt::startRecord()
+{
+  auto timestamp = time::duration_cast<time::microseconds>(time::system_clock::now() - m_epoch).count();
+  static char timestampStr[32];
+  std::snprintf(timestampStr, sizeof(timestampStr), "%ld.%06ld", (timestamp / 1000000), (timestamp % 1000000));
+  return m_os << timestampStr << DELIM;
+}
+
+static const Name LOCALHOST("/localhost");
+
+void
+Ttt::recordPacketArrival(char pktType, const Name& name, TttPacketDecision decision)
+{
+  if (LOCALHOST.isPrefixOf(name)) {
+    return;
+  }
+
+  Ttt::get().startRecord() <<
+    "PKT" << DELIM <<
+    pktType << DELIM <<
+    name << DELIM <<
+    decision << std::endl;
+}
+
+void
+Ttt::recordTableChange(TttTableAction action, TttTable table, const Name& name)
+{
+  if (LOCALHOST.isPrefixOf(name)) {
+    return;
+  }
+
+  Ttt::get().startRecord() <<
+    action << DELIM <<
+    table << DELIM <<
+    name << std::endl;
+}
+
+} // namespace nfd
diff --git a/daemon/ttt.hpp b/daemon/ttt.hpp
new file mode 100644
index 0000000..1cad0af
--- /dev/null
+++ b/daemon/ttt.hpp
@@ -0,0 +1,92 @@
+#ifndef NFD_DAEMON_TTT_HPP
+#define NFD_DAEMON_TTT_HPP
+
+#include "face/face.hpp"
+#include <fstream>
+
+namespace nfd {
+
+enum class TttPacketDecision {
+  NONE,
+  DROP,
+  FIB,
+  PIT,
+  CS
+};
+
+std::ostream&
+operator<<(std::ostream& os, TttPacketDecision decision);
+
+enum class TttTableAction {
+  NONE,
+  INS,
+  DEL
+};
+
+std::ostream&
+operator<<(std::ostream& os, TttTableAction action);
+
+enum class TttTable {
+  NONE,
+  FIB,
+  PIT,
+  CS
+};
+
+std::ostream&
+operator<<(std::ostream& os, TttTable table);
+
+/** \brief write Traffic and Table Trace for NDN-NIC simulation
+ *  \sa https://github.com/yoursunny/NDN-NIC/blob/master/spec/traffic-table-trace.md
+ *
+ *  To enable writing Traffic and Table Trace, set environment variables:
+ *  TTT_FACE is the remote FaceUri of NDN-NIC.
+ *  TTT_EPOCH is the scenario start time in `date +%s` format.
+ *  TTT_LOG is the output filename.
+ */
+class Ttt
+{
+public:
+  static bool
+  isNdnNic(const Face& face);
+
+  static void
+  recordPacketArrival(const Interest& interest, TttPacketDecision decision)
+  {
+    recordPacketArrival('I', interest.getName(), decision);
+  }
+
+  static void
+  recordPacketArrival(const Data& data, TttPacketDecision decision)
+  {
+    recordPacketArrival('D', data.getName(), decision);
+  }
+
+  static void
+  recordTableChange(TttTableAction action, TttTable table, const Name& name);
+
+private:
+  Ttt();
+
+  static Ttt&
+  get();
+
+  /** \brief write timestamp
+   *  \return the output stream
+   */
+  std::ostream&
+  startRecord();
+
+  static void
+  recordPacketArrival(char pktType, const Name& name, TttPacketDecision decision);
+
+private:
+  static const char DELIM = '\t';
+  time::system_clock::TimePoint m_epoch;
+  std::ofstream m_os;
+  FaceUri m_ndnNic;
+};
+
+} // namespace nfd
+
+#endif // NFD_DAEMON_TTT_HPP
